glMatrixArrayType =
  "undefined" != typeof Float32Array
    ? Float32Array
    : "undefined" != typeof WebGLFloatArray
    ? WebGLFloatArray
    : Array;
var vec3 = {};
(vec3.create = function (_) {
  var t = new glMatrixArrayType(3);
  return _ && ((t[0] = _[0]), (t[1] = _[1]), (t[2] = _[2])), t;
}),
  (vec3.set = function (_, t) {
    return (t[0] = _[0]), (t[1] = _[1]), (t[2] = _[2]), t;
  }),
  (vec3.add = function (_, t, $) {
    return $ && _ != $
      ? (($[0] = _[0] + t[0]), ($[1] = _[1] + t[1]), ($[2] = _[2] + t[2]), $)
      : ((_[0] += t[0]), (_[1] += t[1]), (_[2] += t[2]), _);
  }),
  (vec3.subtract = function (_, t, $) {
    return $ && _ != $
      ? (($[0] = _[0] - t[0]), ($[1] = _[1] - t[1]), ($[2] = _[2] - t[2]), $)
      : ((_[0] -= t[0]), (_[1] -= t[1]), (_[2] -= t[2]), _);
  }),
  (vec3.negate = function (_, t) {
    return t || (t = _), (t[0] = -_[0]), (t[1] = -_[1]), (t[2] = -_[2]), t;
  }),
  (vec3.scale = function (_, t, $) {
    return $ && _ != $
      ? (($[0] = _[0] * t), ($[1] = _[1] * t), ($[2] = _[2] * t), $)
      : ((_[0] *= t), (_[1] *= t), (_[2] *= t), _);
  }),
  (vec3.normalize = function (_, t) {
    t || (t = _);
    var $ = _[0],
      r = _[1],
      n = _[2],
      e = Math.sqrt($ * $ + r * r + n * n);
    return e
      ? 1 == e
        ? ((t[0] = $), (t[1] = r), (t[2] = n), t)
        : ((e = 1 / e), (t[0] = $ * e), (t[1] = r * e), (t[2] = n * e), t)
      : ((t[0] = 0), (t[1] = 0), (t[2] = 0), t);
  }),
  (vec3.cross = function (_, t, $) {
    $ || ($ = _);
    var r = _[0],
      n = _[1];
    _ = _[2];
    var e = t[0],
      a = t[1];
    return (
      (t = t[2]),
      ($[0] = n * t - _ * a),
      ($[1] = _ * e - r * t),
      ($[2] = r * a - n * e),
      $
    );
  }),
  (vec3.length = function (_) {
    var t = _[0],
      $ = _[1];
    return Math.sqrt(t * t + $ * $ + (_ = _[2]) * _);
  }),
  (vec3.dot = function (_, t) {
    return _[0] * t[0] + _[1] * t[1] + _[2] * t[2];
  }),
  (vec3.direction = function (_, t, $) {
    $ || ($ = _);
    var r = _[0] - t[0],
      n = _[1] - t[1];
    return (t = Math.sqrt(r * r + n * n + (_ = _[2] - t[2]) * _))
      ? ((t = 1 / t), ($[0] = r * t), ($[1] = n * t), ($[2] = _ * t), $)
      : (($[0] = 0), ($[1] = 0), ($[2] = 0), $);
  }),
  (vec3.lerp = function (_, t, $, r) {
    return (
      r || (r = _),
      (r[0] = _[0] + $ * (t[0] - _[0])),
      (r[1] = _[1] + $ * (t[1] - _[1])),
      (r[2] = _[2] + $ * (t[2] - _[2])),
      r
    );
  }),
  (vec3.str = function (_) {
    return "[" + _[0] + ", " + _[1] + ", " + _[2] + "]";
  });
var mat3 = {};
(mat3.create = function (_) {
  var t = new glMatrixArrayType(9);
  return (
    _ &&
      ((t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = _[3]),
      (t[4] = _[4]),
      (t[5] = _[5]),
      (t[6] = _[6]),
      (t[7] = _[7]),
      (t[8] = _[8]),
      (t[9] = _[9])),
    t
  );
}),
  (mat3.set = function (_, t) {
    return (
      (t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = _[3]),
      (t[4] = _[4]),
      (t[5] = _[5]),
      (t[6] = _[6]),
      (t[7] = _[7]),
      (t[8] = _[8]),
      t
    );
  }),
  (mat3.identity = function (_) {
    return (
      (_[0] = 1),
      (_[1] = 0),
      (_[2] = 0),
      (_[3] = 0),
      (_[4] = 1),
      (_[5] = 0),
      (_[6] = 0),
      (_[7] = 0),
      (_[8] = 1),
      _
    );
  }),
  (mat3.transpose = function (_, t) {
    if (!t || _ == t) {
      var $ = _[1],
        r = _[2],
        n = _[5];
      return (
        (_[1] = _[3]),
        (_[2] = _[6]),
        (_[3] = $),
        (_[5] = _[7]),
        (_[6] = r),
        (_[7] = n),
        _
      );
    }
    return (
      (t[0] = _[0]),
      (t[1] = _[3]),
      (t[2] = _[6]),
      (t[3] = _[1]),
      (t[4] = _[4]),
      (t[5] = _[7]),
      (t[6] = _[2]),
      (t[7] = _[5]),
      (t[8] = _[8]),
      t
    );
  }),
  (mat3.toMat4 = function (_, t) {
    return (
      t || (t = mat4.create()),
      (t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = 0),
      (t[4] = _[3]),
      (t[5] = _[4]),
      (t[6] = _[5]),
      (t[7] = 0),
      (t[8] = _[6]),
      (t[9] = _[7]),
      (t[10] = _[8]),
      (t[11] = 0),
      (t[12] = 0),
      (t[13] = 0),
      (t[14] = 0),
      (t[15] = 1),
      t
    );
  }),
  (mat3.str = function (_) {
    return (
      "[" +
      _[0] +
      ", " +
      _[1] +
      ", " +
      _[2] +
      ", " +
      _[3] +
      ", " +
      _[4] +
      ", " +
      _[5] +
      ", " +
      _[6] +
      ", " +
      _[7] +
      ", " +
      _[8] +
      "]"
    );
  });
var mat4 = {};
(mat4.create = function (_) {
  var t = new glMatrixArrayType(16);
  return (
    _ &&
      ((t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = _[3]),
      (t[4] = _[4]),
      (t[5] = _[5]),
      (t[6] = _[6]),
      (t[7] = _[7]),
      (t[8] = _[8]),
      (t[9] = _[9]),
      (t[10] = _[10]),
      (t[11] = _[11]),
      (t[12] = _[12]),
      (t[13] = _[13]),
      (t[14] = _[14]),
      (t[15] = _[15])),
    t
  );
}),
  (mat4.set = function (_, t) {
    return (
      (t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = _[3]),
      (t[4] = _[4]),
      (t[5] = _[5]),
      (t[6] = _[6]),
      (t[7] = _[7]),
      (t[8] = _[8]),
      (t[9] = _[9]),
      (t[10] = _[10]),
      (t[11] = _[11]),
      (t[12] = _[12]),
      (t[13] = _[13]),
      (t[14] = _[14]),
      (t[15] = _[15]),
      t
    );
  }),
  (mat4.identity = function (_) {
    return (
      (_[0] = 1),
      (_[1] = 0),
      (_[2] = 0),
      (_[3] = 0),
      (_[4] = 0),
      (_[5] = 1),
      (_[6] = 0),
      (_[7] = 0),
      (_[8] = 0),
      (_[9] = 0),
      (_[10] = 1),
      (_[11] = 0),
      (_[12] = 0),
      (_[13] = 0),
      (_[14] = 0),
      (_[15] = 1),
      _
    );
  }),
  (mat4.transpose = function (_, t) {
    if (!t || _ == t) {
      var $ = _[1],
        r = _[2],
        n = _[3],
        e = _[6],
        a = _[7],
        u = _[11];
      return (
        (_[1] = _[4]),
        (_[2] = _[8]),
        (_[3] = _[12]),
        (_[4] = $),
        (_[6] = _[9]),
        (_[7] = _[13]),
        (_[8] = r),
        (_[9] = e),
        (_[11] = _[14]),
        (_[12] = n),
        (_[13] = a),
        (_[14] = u),
        _
      );
    }
    return (
      (t[0] = _[0]),
      (t[1] = _[4]),
      (t[2] = _[8]),
      (t[3] = _[12]),
      (t[4] = _[1]),
      (t[5] = _[5]),
      (t[6] = _[9]),
      (t[7] = _[13]),
      (t[8] = _[2]),
      (t[9] = _[6]),
      (t[10] = _[10]),
      (t[11] = _[14]),
      (t[12] = _[3]),
      (t[13] = _[7]),
      (t[14] = _[11]),
      (t[15] = _[15]),
      t
    );
  }),
  (mat4.determinant = function (_) {
    var t = _[0],
      $ = _[1],
      r = _[2],
      n = _[3],
      e = _[4],
      a = _[5],
      u = _[6],
      c = _[7],
      i = _[8],
      o = _[9],
      v = _[10],
      f = _[11],
      m = _[12],
      s = _[13],
      l = _[14];
    return (
      m * o * u * n -
      i * s * u * n -
      m * a * v * n +
      e * s * v * n +
      i * a * l * n -
      e * o * l * n -
      m * o * r * c +
      i * s * r * c +
      m * $ * v * c -
      t * s * v * c -
      i * $ * l * c +
      t * o * l * c +
      m * a * r * f -
      e * s * r * f -
      m * $ * u * f +
      t * s * u * f +
      e * $ * l * f -
      t * a * l * f -
      i * a * r * (_ = _[15]) +
      e * o * r * _ +
      i * $ * u * _ -
      t * o * u * _ -
      e * $ * v * _ +
      t * a * v * _
    );
  }),
  (mat4.inverse = function (_, t) {
    t || (t = _);
    var $ = _[0],
      r = _[1],
      n = _[2],
      e = _[3],
      a = _[4],
      u = _[5],
      c = _[6],
      i = _[7],
      o = _[8],
      v = _[9],
      f = _[10],
      m = _[11],
      s = _[12],
      l = _[13],
      p = _[14],
      d = _[15],
      q = $ * u - r * a,
      y = $ * c - n * a,
      M = $ * i - e * a,
      w = r * c - n * u,
      b = r * i - e * u,
      g = n * i - e * c,
      h = o * l - v * s,
      V = o * p - f * s,
      z = o * d - m * s,
      I = v * p - f * l,
      k = v * d - m * l,
      A = f * d - m * p,
      P = 1 / (q * A - y * k + M * I + w * z - b * V + g * h);
    return (
      (t[0] = (u * A - c * k + i * I) * P),
      (t[1] = (-r * A + n * k - e * I) * P),
      (t[2] = (l * g - p * b + d * w) * P),
      (t[3] = (-v * g + f * b - m * w) * P),
      (t[4] = (-a * A + c * z - i * V) * P),
      (t[5] = ($ * A - n * z + e * V) * P),
      (t[6] = (-s * g + p * M - d * y) * P),
      (t[7] = (o * g - f * M + m * y) * P),
      (t[8] = (a * k - u * z + i * h) * P),
      (t[9] = (-$ * k + r * z - e * h) * P),
      (t[10] = (s * b - l * M + d * q) * P),
      (t[11] = (-o * b + v * M - m * q) * P),
      (t[12] = (-a * I + u * V - c * h) * P),
      (t[13] = ($ * I - r * V + n * h) * P),
      (t[14] = (-s * w + l * y - p * q) * P),
      (t[15] = (o * w - v * y + f * q) * P),
      t
    );
  }),
  (mat4.toRotationMat = function (_, t) {
    return (
      t || (t = mat4.create()),
      (t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = _[3]),
      (t[4] = _[4]),
      (t[5] = _[5]),
      (t[6] = _[6]),
      (t[7] = _[7]),
      (t[8] = _[8]),
      (t[9] = _[9]),
      (t[10] = _[10]),
      (t[11] = _[11]),
      (t[12] = 0),
      (t[13] = 0),
      (t[14] = 0),
      (t[15] = 1),
      t
    );
  }),
  (mat4.toMat3 = function (_, t) {
    return (
      t || (t = mat3.create()),
      (t[0] = _[0]),
      (t[1] = _[1]),
      (t[2] = _[2]),
      (t[3] = _[4]),
      (t[4] = _[5]),
      (t[5] = _[6]),
      (t[6] = _[8]),
      (t[7] = _[9]),
      (t[8] = _[10]),
      t
    );
  }),
  (mat4.toInverseMat3 = function (_, t) {
    var $ = _[0],
      r = _[1],
      n = _[2],
      e = _[4],
      a = _[5],
      u = _[6],
      c = _[8],
      i = _[9],
      o = _[10],
      v = o * a - u * i,
      f = -o * e + u * c,
      m = i * e - a * c,
      s = $ * v + r * f + n * m;
    return s
      ? ((s = 1 / s),
        t || (t = mat3.create()),
        (t[0] = v * s),
        (t[1] = (-o * r + n * i) * s),
        (t[2] = (u * r - n * a) * s),
        (t[3] = f * s),
        (t[4] = (o * $ - n * c) * s),
        (t[5] = (-u * $ + n * e) * s),
        (t[6] = m * s),
        (t[7] = (-i * $ + r * c) * s),
        (t[8] = (a * $ - r * e) * s),
        t)
      : null;
  }),
  (mat4.multiply = function (_, t, $) {
    $ || ($ = _);
    var r = _[0],
      n = _[1],
      e = _[2],
      a = _[3],
      u = _[4],
      c = _[5],
      i = _[6],
      o = _[7],
      v = _[8],
      f = _[9],
      m = _[10],
      s = _[11],
      l = _[12],
      p = _[13],
      d = _[14];
    _ = _[15];
    var q = t[0],
      y = t[1],
      M = t[2],
      w = t[3],
      b = t[4],
      g = t[5],
      h = t[6],
      V = t[7],
      z = t[8],
      I = t[9],
      k = t[10],
      A = t[11],
      P = t[12],
      R = t[13],
      W = t[14];
    return (
      (t = t[15]),
      ($[0] = q * r + y * u + M * v + w * l),
      ($[1] = q * n + y * c + M * f + w * p),
      ($[2] = q * e + y * i + M * m + w * d),
      ($[3] = q * a + y * o + M * s + w * _),
      ($[4] = b * r + g * u + h * v + V * l),
      ($[5] = b * n + g * c + h * f + V * p),
      ($[6] = b * e + g * i + h * m + V * d),
      ($[7] = b * a + g * o + h * s + V * _),
      ($[8] = z * r + I * u + k * v + A * l),
      ($[9] = z * n + I * c + k * f + A * p),
      ($[10] = z * e + I * i + k * m + A * d),
      ($[11] = z * a + I * o + k * s + A * _),
      ($[12] = P * r + R * u + W * v + t * l),
      ($[13] = P * n + R * c + W * f + t * p),
      ($[14] = P * e + R * i + W * m + t * d),
      ($[15] = P * a + R * o + W * s + t * _),
      $
    );
  }),
  (mat4.multiplyVec3 = function (_, t, $) {
    $ || ($ = t);
    var r = t[0],
      n = t[1];
    return (
      (t = t[2]),
      ($[0] = _[0] * r + _[4] * n + _[8] * t + _[12]),
      ($[1] = _[1] * r + _[5] * n + _[9] * t + _[13]),
      ($[2] = _[2] * r + _[6] * n + _[10] * t + _[14]),
      $
    );
  }),
  (mat4.multiplyVec4 = function (_, t, $) {
    $ || ($ = t);
    var r = t[0],
      n = t[1],
      e = t[2];
    return (
      (t = t[3]),
      ($[0] = _[0] * r + _[4] * n + _[8] * e + _[12] * t),
      ($[1] = _[1] * r + _[5] * n + _[9] * e + _[13] * t),
      ($[2] = _[2] * r + _[6] * n + _[10] * e + _[14] * t),
      ($[3] = _[3] * r + _[7] * n + _[11] * e + _[15] * t),
      $
    );
  }),
  (mat4.translate = function (_, t, $) {
    var r = t[0],
      n = t[1];
    if (((t = t[2]), !$ || _ == $))
      return (
        (_[12] = _[0] * r + _[4] * n + _[8] * t + _[12]),
        (_[13] = _[1] * r + _[5] * n + _[9] * t + _[13]),
        (_[14] = _[2] * r + _[6] * n + _[10] * t + _[14]),
        (_[15] = _[3] * r + _[7] * n + _[11] * t + _[15]),
        _
      );
    var e = _[0],
      a = _[1],
      u = _[2],
      c = _[3],
      i = _[4],
      o = _[5],
      v = _[6],
      f = _[7],
      m = _[8],
      s = _[9],
      l = _[10],
      p = _[11];
    return (
      ($[0] = e),
      ($[1] = a),
      ($[2] = u),
      ($[3] = c),
      ($[4] = i),
      ($[5] = o),
      ($[6] = v),
      ($[7] = f),
      ($[8] = m),
      ($[9] = s),
      ($[10] = l),
      ($[11] = p),
      ($[12] = e * r + i * n + m * t + _[12]),
      ($[13] = a * r + o * n + s * t + _[13]),
      ($[14] = u * r + v * n + l * t + _[14]),
      ($[15] = c * r + f * n + p * t + _[15]),
      $
    );
  }),
  (mat4.scale = function (_, t, $) {
    var r = t[0],
      n = t[1];
    return ((t = t[2]), $ && _ != $)
      ? (($[0] = _[0] * r),
        ($[1] = _[1] * r),
        ($[2] = _[2] * r),
        ($[3] = _[3] * r),
        ($[4] = _[4] * n),
        ($[5] = _[5] * n),
        ($[6] = _[6] * n),
        ($[7] = _[7] * n),
        ($[8] = _[8] * t),
        ($[9] = _[9] * t),
        ($[10] = _[10] * t),
        ($[11] = _[11] * t),
        ($[12] = _[12]),
        ($[13] = _[13]),
        ($[14] = _[14]),
        ($[15] = _[15]),
        $)
      : ((_[0] *= r),
        (_[1] *= r),
        (_[2] *= r),
        (_[3] *= r),
        (_[4] *= n),
        (_[5] *= n),
        (_[6] *= n),
        (_[7] *= n),
        (_[8] *= t),
        (_[9] *= t),
        (_[10] *= t),
        (_[11] *= t),
        _);
  }),
  (mat4.rotate = function (_, t, $, r) {
    var n = $[0],
      e = $[1],
      a = Math.sqrt(n * n + e * e + ($ = $[2]) * $);
    if (!a) return null;
    1 != a && ((n *= a = 1 / a), (e *= a), ($ *= a));
    var u = Math.sin(t),
      c = Math.cos(t),
      i = 1 - c;
    (t = _[0]), (a = _[1]);
    var o = _[2],
      v = _[3],
      f = _[4],
      m = _[5],
      s = _[6],
      l = _[7],
      p = _[8],
      d = _[9],
      q = _[10],
      y = _[11],
      M = n * n * i + c,
      w = e * n * i + $ * u,
      b = $ * n * i - e * u,
      g = n * e * i - $ * u,
      h = e * e * i + c,
      V = $ * e * i + n * u,
      z = n * $ * i + e * u;
    return (
      (n = e * $ * i - n * u),
      (e = $ * $ * i + c),
      r
        ? _ != r &&
          ((r[12] = _[12]), (r[13] = _[13]), (r[14] = _[14]), (r[15] = _[15]))
        : (r = _),
      (r[0] = t * M + f * w + p * b),
      (r[1] = a * M + m * w + d * b),
      (r[2] = o * M + s * w + q * b),
      (r[3] = v * M + l * w + y * b),
      (r[4] = t * g + f * h + p * V),
      (r[5] = a * g + m * h + d * V),
      (r[6] = o * g + s * h + q * V),
      (r[7] = v * g + l * h + y * V),
      (r[8] = t * z + f * n + p * e),
      (r[9] = a * z + m * n + d * e),
      (r[10] = o * z + s * n + q * e),
      (r[11] = v * z + l * n + y * e),
      r
    );
  }),
  (mat4.rotateX = function (_, t, $) {
    var r = Math.sin(t);
    t = Math.cos(t);
    var n = _[4],
      e = _[5],
      a = _[6],
      u = _[7],
      c = _[8],
      i = _[9],
      o = _[10],
      v = _[11];
    return (
      $
        ? _ != $ &&
          (($[0] = _[0]),
          ($[1] = _[1]),
          ($[2] = _[2]),
          ($[3] = _[3]),
          ($[12] = _[12]),
          ($[13] = _[13]),
          ($[14] = _[14]),
          ($[15] = _[15]))
        : ($ = _),
      ($[4] = n * t + c * r),
      ($[5] = e * t + i * r),
      ($[6] = a * t + o * r),
      ($[7] = u * t + v * r),
      ($[8] = -(n * r) + c * t),
      ($[9] = -(e * r) + i * t),
      ($[10] = -(a * r) + o * t),
      ($[11] = -(u * r) + v * t),
      $
    );
  }),
  (mat4.rotateY = function (_, t, $) {
    var r = Math.sin(t);
    t = Math.cos(t);
    var n = _[0],
      e = _[1],
      a = _[2],
      u = _[3],
      c = _[8],
      i = _[9],
      o = _[10],
      v = _[11];
    return (
      $
        ? _ != $ &&
          (($[4] = _[4]),
          ($[5] = _[5]),
          ($[6] = _[6]),
          ($[7] = _[7]),
          ($[12] = _[12]),
          ($[13] = _[13]),
          ($[14] = _[14]),
          ($[15] = _[15]))
        : ($ = _),
      ($[0] = n * t + -(c * r)),
      ($[1] = e * t + -(i * r)),
      ($[2] = a * t + -(o * r)),
      ($[3] = u * t + -(v * r)),
      ($[8] = n * r + c * t),
      ($[9] = e * r + i * t),
      ($[10] = a * r + o * t),
      ($[11] = u * r + v * t),
      $
    );
  }),
  (mat4.rotateZ = function (_, t, $) {
    var r = Math.sin(t);
    t = Math.cos(t);
    var n = _[0],
      e = _[1],
      a = _[2],
      u = _[3],
      c = _[4],
      i = _[5],
      o = _[6],
      v = _[7];
    return (
      $
        ? _ != $ &&
          (($[8] = _[8]),
          ($[9] = _[9]),
          ($[10] = _[10]),
          ($[11] = _[11]),
          ($[12] = _[12]),
          ($[13] = _[13]),
          ($[14] = _[14]),
          ($[15] = _[15]))
        : ($ = _),
      ($[0] = n * t + c * r),
      ($[1] = e * t + i * r),
      ($[2] = a * t + o * r),
      ($[3] = u * t + v * r),
      ($[4] = -(n * r) + c * t),
      ($[5] = -(e * r) + i * t),
      ($[6] = -(a * r) + o * t),
      ($[7] = -(u * r) + v * t),
      $
    );
  }),
  (mat4.frustum = function (_, t, $, r, n, e, a) {
    a || (a = mat4.create());
    var u = t - _,
      c = r - $,
      i = e - n;
    return (
      (a[0] = (2 * n) / u),
      (a[1] = 0),
      (a[2] = 0),
      (a[3] = 0),
      (a[4] = 0),
      (a[5] = (2 * n) / c),
      (a[6] = 0),
      (a[7] = 0),
      (a[8] = (t + _) / u),
      (a[9] = (r + $) / c),
      (a[10] = -(e + n) / i),
      (a[11] = -1),
      (a[12] = 0),
      (a[13] = 0),
      (a[14] = -(e * n * 2) / i),
      (a[15] = 0),
      a
    );
  }),
  (mat4.perspective = function (_, t, $, r, n) {
    return (
      (t *= _ = $ * Math.tan((_ * Math.PI) / 360)),
      mat4.frustum(-t, t, -_, _, $, r, n)
    );
  }),
  (mat4.ortho = function (_, t, $, r, n, e, a) {
    a || (a = mat4.create());
    var u = t - _,
      c = r - $,
      i = e - n;
    return (
      (a[0] = 2 / u),
      (a[1] = 0),
      (a[2] = 0),
      (a[3] = 0),
      (a[4] = 0),
      (a[5] = 2 / c),
      (a[6] = 0),
      (a[7] = 0),
      (a[8] = 0),
      (a[9] = 0),
      (a[10] = -2 / i),
      (a[11] = 0),
      (a[12] = -(_ + t) / u),
      (a[13] = -(r + $) / c),
      (a[14] = -(e + n) / i),
      (a[15] = 1),
      a
    );
  }),
  (mat4.lookAt = function (_, t, $, r) {
    r || (r = mat4.create());
    var n,
      e,
      a,
      u,
      c = _[0],
      i = _[1];
    _ = _[2];
    var o = $[0],
      v = $[1],
      f = $[2];
    $ = t[1];
    var m = t[2];
    return c == t[0] && i == $ && _ == m
      ? mat4.identity(r)
      : (($ = c - t[0]),
        (u = 1 / Math.sqrt($ * $ + (m = i - t[1]) * m + (t = _ - t[2]) * t)),
        ($ *= u),
        (m *= u),
        (t *= u),
        (n = v * t - f * m),
        (u = Math.sqrt(
          n * n + (f = f * $ - o * t) * f + (o = o * m - v * $) * o
        ))
          ? ((n *= u = 1 / u), (f *= u), (o *= u))
          : (o = f = n = 0),
        (v = m * o - t * f),
        (u = Math.sqrt(
          v * v + (e = t * n - $ * o) * e + (a = $ * f - m * n) * a
        ))
          ? ((v *= u = 1 / u), (e *= u), (a *= u))
          : (a = e = v = 0),
        (r[0] = n),
        (r[1] = v),
        (r[2] = $),
        (r[3] = 0),
        (r[4] = f),
        (r[5] = e),
        (r[6] = m),
        (r[7] = 0),
        (r[8] = o),
        (r[9] = a),
        (r[10] = t),
        (r[11] = 0),
        (r[12] = -(n * c + f * i + o * _)),
        (r[13] = -(v * c + e * i + a * _)),
        (r[14] = -($ * c + m * i + t * _)),
        (r[15] = 1),
        r);
  }),
  (mat4.str = function (_) {
    return (
      "[" +
      _[0] +
      ", " +
      _[1] +
      ", " +
      _[2] +
      ", " +
      _[3] +
      ", " +
      _[4] +
      ", " +
      _[5] +
      ", " +
      _[6] +
      ", " +
      _[7] +
      ", " +
      _[8] +
      ", " +
      _[9] +
      ", " +
      _[10] +
      ", " +
      _[11] +
      ", " +
      _[12] +
      ", " +
      _[13] +
      ", " +
      _[14] +
      ", " +
      _[15] +
      "]"
    );
  }),
  ((quat4 = {}).create = function (_) {
    var t = new glMatrixArrayType(4);
    return _ && ((t[0] = _[0]), (t[1] = _[1]), (t[2] = _[2]), (t[3] = _[3])), t;
  }),
  (quat4.set = function (_, t) {
    return (t[0] = _[0]), (t[1] = _[1]), (t[2] = _[2]), (t[3] = _[3]), t;
  }),
  (quat4.calculateW = function (_, t) {
    var $ = _[0],
      r = _[1],
      n = _[2];
    return t && _ != t
      ? ((t[0] = $),
        (t[1] = r),
        (t[2] = n),
        (t[3] = -Math.sqrt(Math.abs(1 - $ * $ - r * r - n * n))),
        t)
      : ((_[3] = -Math.sqrt(Math.abs(1 - $ * $ - r * r - n * n))), _);
  }),
  (quat4.inverse = function (_, t) {
    return t && _ != t
      ? ((t[0] = -_[0]), (t[1] = -_[1]), (t[2] = -_[2]), (t[3] = _[3]), t)
      : ((_[0] *= 1), (_[1] *= 1), (_[2] *= 1), _);
  }),
  (quat4.length = function (_) {
    var t = _[0],
      $ = _[1],
      r = _[2];
    return Math.sqrt(t * t + $ * $ + r * r + (_ = _[3]) * _);
  }),
  (quat4.normalize = function (_, t) {
    t || (t = _);
    var $ = _[0],
      r = _[1],
      n = _[2],
      e = _[3],
      a = Math.sqrt($ * $ + r * r + n * n + e * e);
    return 0 == a
      ? ((t[0] = 0), (t[1] = 0), (t[2] = 0), (t[3] = 0), t)
      : ((a = 1 / a),
        (t[0] = $ * a),
        (t[1] = r * a),
        (t[2] = n * a),
        (t[3] = e * a),
        t);
  }),
  (quat4.multiply = function (_, t, $) {
    $ || ($ = _);
    var r = _[0],
      n = _[1],
      e = _[2];
    _ = _[3];
    var a = t[0],
      u = t[1],
      c = t[2];
    return (
      (t = t[3]),
      ($[0] = r * t + _ * a + n * c - e * u),
      ($[1] = n * t + _ * u + e * a - r * c),
      ($[2] = e * t + _ * c + r * u - n * a),
      ($[3] = _ * t - r * a - n * u - e * c),
      $
    );
  }),
  (quat4.multiplyVec3 = function (_, t, $) {
    $ || ($ = t);
    var r = t[0],
      n = t[1],
      e = t[2];
    t = _[0];
    var a = _[1],
      u = _[2],
      c = (_ = _[3]) * r + a * e - u * n,
      i = _ * n + u * r - t * e,
      o = _ * e + t * n - a * r;
    return (
      (r = -t * r - a * n - u * e),
      ($[0] = c * _ + -(r * t) + -(i * u) - -(o * a)),
      ($[1] = i * _ + -(r * a) + -(o * t) - -(c * u)),
      ($[2] = o * _ + -(r * u) + -(c * a) - -(i * t)),
      $
    );
  }),
  (quat4.toMat3 = function (_, t) {
    t || (t = mat3.create());
    var $ = _[0],
      r = _[1],
      n = _[2],
      e = _[3],
      a = $ + $,
      u = r + r,
      c = n + n,
      i = $ * a,
      o = $ * u;
    $ *= c;
    var v = r * u;
    return (
      (r *= c),
      (n *= c),
      (a *= e),
      (u *= e),
      (e *= c),
      (t[0] = 1 - (v + n)),
      (t[1] = o - e),
      (t[2] = $ + u),
      (t[3] = o + e),
      (t[4] = 1 - (i + n)),
      (t[5] = r - a),
      (t[6] = $ - u),
      (t[7] = r + a),
      (t[8] = 1 - (i + v)),
      t
    );
  }),
  (quat4.toMat4 = function (_, t) {
    t || (t = mat4.create());
    var $ = _[0],
      r = _[1],
      n = _[2],
      e = _[3],
      a = $ + $,
      u = r + r,
      c = n + n,
      i = $ * a,
      o = $ * u;
    $ *= c;
    var v = r * u;
    return (
      (r *= c),
      (n *= c),
      (a *= e),
      (u *= e),
      (e *= c),
      (t[0] = 1 - (v + n)),
      (t[1] = o - e),
      (t[2] = $ + u),
      (t[3] = 0),
      (t[4] = o + e),
      (t[5] = 1 - (i + n)),
      (t[6] = r - a),
      (t[7] = 0),
      (t[8] = $ - u),
      (t[9] = r + a),
      (t[10] = 1 - (i + v)),
      (t[11] = 0),
      (t[12] = 0),
      (t[13] = 0),
      (t[14] = 0),
      (t[15] = 1),
      t
    );
  }),
  (quat4.slerp = function (_, t, $, r) {
    r || (r = _);
    var n = $;
    return (
      _[0] * t[0] + _[1] * t[1] + _[2] * t[2] + _[3] * t[3] < 0 && (n = -1 * $),
      (r[0] = 1 - $ * _[0] + n * t[0]),
      (r[1] = 1 - $ * _[1] + n * t[1]),
      (r[2] = 1 - $ * _[2] + n * t[2]),
      (r[3] = 1 - $ * _[3] + n * t[3]),
      r
    );
  }),
  (quat4.str = function (_) {
    return "[" + _[0] + ", " + _[1] + ", " + _[2] + ", " + _[3] + "]";
  });
